# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wnttLrHdANhsI9C1Iuea1BAx9Tu7ORlV
"""

import streamlit as st
import pandas as pd
import joblib
import numpy as np

# ---------------------------
# Load Model
# ---------------------------
model_file = "car_price_xgb.pkl"
xgb_pipeline = joblib.load(model_file)

# ---------------------------
# Streamlit Page Config
# ---------------------------
st.set_page_config(page_title="Car Price Prediction", page_icon="ðŸš—", layout="centered")

# Background Image (CSS)
def set_bg():
    st.markdown(
        """
        <style>
        .stApp {
            background-image: url("https://wallpapercave.com/wp/wp7311343.jpg");
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
        }
        .title {
            background-color: rgba(0,0,0,0.65);
            color: white;
            padding: 12px;
            border-radius: 10px;
            text-align: center;
            font-size: 28px;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

set_bg()

# ---------------------------
# Title
# ---------------------------
st.markdown('<div class="title">ðŸš˜ Car Price Prediction App</div>', unsafe_allow_html=True)
st.write("Enter the car details below to get the estimated price:")

# ---------------------------
# Input Form
# ---------------------------
with st.form("car_form"):
    col1, col2 = st.columns(2)

    with col1:
        make = st.text_input("Make", "Hyundai")
        model = st.text_input("Model", "i20")
        city = st.text_input("City", "Kochi")
        year = st.number_input("Year of Manufacture", min_value=1990, max_value=2025, step=1, value=2016)
        kilometerdriven = st.number_input("Kilometers Driven", min_value=0, max_value=500000, step=1000, value=35000)

    with col2:
        fueltype = st.selectbox("Fuel Type", ["Petrol", "Diesel", "CNG", "Petrol+CNG", "Electric"])
        transmission = st.selectbox("Transmission", ["Manual", "Automatic"])
        bodytype = st.selectbox("Body Type", ["Hatchback", "Sedan", "SUV", "MUV", "Coupe"])
        isc24assured = st.selectbox("C24 Assured?", ["No", "Yes"])
        isc24assured = 1 if isc24assured == "Yes" else 0
        registrationstate = st.text_input("Registration State", "KL")
        owner_category = st.selectbox("Owner Category", ["First Owner", "Second Owner", "Third Owner", "Fourth & Above"])

    submitted = st.form_submit_button("Predict Price ðŸš€")

# ---------------------------
# Prediction
# ---------------------------
if submitted:
    # Compute age dynamically to match training pipeline
    from datetime import datetime
    current_year = datetime.now().year
    age = current_year - year

    new_car = pd.DataFrame([{
        "make": make,
        "model": model,
        "city": city,
        "year": year,
        "fueltype": fueltype,
        "kilometerdriven": kilometerdriven,
        "transmission": transmission,
        "bodytype": bodytype,
        "isc24assured": isc24assured,
        "registrationstate": registrationstate,
        "age": age,
        "owner_category": owner_category
    }])

    predicted_price = xgb_pipeline.predict(new_car)[0]

    # Round to nearest 100 and format nicely
    rounded_price = np.round(predicted_price, -2)
    formatted_price = f"â‚¹ {rounded_price:,.2f}"

    st.success(f"ðŸ’° Estimated Car Price: {formatted_price}")
